// Copyright 2023 max
// 
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

const { GoogleSpreadsheet } = require('google-spreadsheet')
const { JWT } = require('google-auth-library')
const { log, error } = console
const fs = require('fs')

let auth = null
try {
    log('reading auth')
    const contents = fs.readFileSync('commute-times-394616-c4b13d429549.json')
    auth = JSON.parse(contents)
}
catch (e) {
    error(e.message, '\n', e.stack)
}

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: auth.client_email,
    key: auth.private_key,
    scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
    ],
});

async function main() {
    try {
        const doc = new GoogleSpreadsheet('1QhCQV3W-jsE952jJrJzXv0h3L3-Ouq-6TKABM00DNWA', serviceAccountAuth)

        await doc.loadInfo() // loads document properties and worksheets
        console.log('title', doc.title)
        await doc.updateProperties({ title: 'renamed doc' })

        const sheet = doc.sheetsByIndex[0] // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
        console.log('sheet', sheet.title)
        console.log('rows', sheet.rowCount)

        // adding / removing sheets
        // const newSheet = await doc.addSheet({ title: 'another sheet' });
        // await newSheet.delete();
    } catch (e) {
        error(e.message, '\n', e.stack)
    }
}

main()
